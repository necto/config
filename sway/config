# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l

# Fn keys
set $brighter XF86MonBrightnessUp
set $darker XF86MonBrightnessDown

# Your preferred terminal emulator
set $term foot
# Start a new emacs frame
# -c - create a new frame instead of trying to reuse one
# -n - return immediately without waiting until the frame is closed
# --eval '(switch-to-buffer nil)' - open a useful buffer (most recently used but not visible now)
# -a emacs - start a full emacs if no emacs server is found
set $emacs emacsclient -c -n -a emacs --eval '(switch-to-buffer nil)'
set $agenda emacsclient -c -n --eval '(my-org-agenda-cached)'
set $captodo emacsclient -c -F '((name . "org-protocol-capture"))' -n --eval '(org-capture :keys "t")'
set $capnote emacsclient -c -F '((name . "org-protocol-capture"))' -n --eval '(org-capture :keys "n")'
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
set $menu fuzzel -T $term | xargs swaymsg exec --

# background picture compressed with
# convert james-webb-space-telescope-jwst-first-image-full-resolution.png -resize 3440x1440! -quality 90 out.jpg
set $screenlock 'swaylock -fkFl -s stretch -i ~/.config/sway/resources/wallpaper-webb-universe.jpg'

# redshift analog - gammastep allows for automatic screen color temperature adjustment
# according to the time of the day.
set $screendimmer gammastep-indicator

# XDG_CURRENT_DESKTOP=sway is needed for proper initialization of xdg-desktop-portal
# and xdg-desktop-portal-wlr
# xdg-desktop-portal uses XDG_CURRENT_DESKTOP to choose the backend
# xdg-desktop-portal-wlr starts only if WAYLAND_DISPLAY is set
exec systemctl --user set-environment XDG_CURRENT_DESKTOP=sway
exec dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=sway

# Workaround for firefox flooding /var/log/syslog with "Error: WaylandMessage::Write() too many files to send"
# see https://bugs.launchpad.net/ubuntu/+source/firefox/+bug/2051838
exec systemctl --user set-environment MOZ_DISABLE_WAYLAND_PROXY=1

# launch gammastep, see gammastep/config.ini for the coordinates
exec $screendimmer

# launch network manager with a tray icon
exec nm-applet

exec_always pkill kanshi; kanshi -c ~/.config/sway/kanshi.config

# launch file sync daemon
# listens to localhost:8384
exec syncthing --no-browser


# launch notification-display daemon
exec dunst

include /etc/sway/config-vars.d/*


default_border pixel 2

### Output configuration

output * bg ~/.config/sway/resources/wallpaper-tree-horizon.jpg fill

# Custom theming

    #client.<class> <border> <background> <text> <indicator> <child_border>
    client.focused "#ff0000" "#285577" "#ffffff" "#2e9ef4" "#ff0000"
    # client.focused_inactive "#23242a" "#2b2b2b" "#888888" "#000000" "#000000"
    # client.unfocused "#2c2c2c" "#2b2b2b" "#888888" "#000000" "#000000"

include cursor.theme
set $gnome-schema org.gnome.desktop.interface
exec_always {
  gsettings set $gnome-schema cursor-theme $cursor_theme
  gsettings set $gnome-schema cursor-size $cursor_size
}

# Mouse
seat * xcursor_theme $cursor_theme $cursor_size


#
# Outputs are handled by kanshi
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
exec swayidle -w \
         timeout 300 $screenlock \
         timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
         before-sleep $screenlock

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.
input * {
      xkb_layout "us,ru"
      xkb_options "compose:ralt,grp:shift_caps_toggle"
}

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term

    # Start emacs
    bindsym $mod+backslash exec $emacs

    # Pop-up Org agenda
    bindsym $mod+a exec $agenda
    bindsym $mod+t exec $captodo
    bindsym $mod+c exec $capnote
    bindsym $mod+n exec $capnote

    # Kill focused window
    bindsym $mod+Shift+q kill

    # Start your launcher
    bindsym $mod+d exec $menu
    bindsym $mod+p exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Switch to workspace
    bindsym $mod+1 workspace number 1
    bindsym $mod+2 workspace number 2
    bindsym $mod+3 workspace number 3
    bindsym $mod+4 workspace number 4
    bindsym $mod+5 workspace number 5
    bindsym $mod+6 workspace number 6
    bindsym $mod+7 workspace number 7
    bindsym $mod+8 workspace number 8
    bindsym $mod+9 workspace number 9
    bindsym $mod+0 workspace number 10
    # Move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number 1
    bindsym $mod+Shift+2 move container to workspace number 2
    bindsym $mod+Shift+3 move container to workspace number 3
    bindsym $mod+Shift+4 move container to workspace number 4
    bindsym $mod+Shift+5 move container to workspace number 5
    bindsym $mod+Shift+6 move container to workspace number 6
    bindsym $mod+Shift+7 move container to workspace number 7
    bindsym $mod+Shift+8 move container to workspace number 8
    bindsym $mod+Shift+9 move container to workspace number 9
    bindsym $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.

    # Moving workspaces between monitors (called "output"s)
    bindsym $mod+Ctrl+$right move workspace to output right
    bindsym $mod+Ctrl+$left move workspace to output left
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    # Conflicts with Org-agenda binding
    # bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r moje "resize"

#
# Status Bar:
#
bar {
    swaybar_command waybar
}

#
# Lock screen
#
    bindsym $mod+z exec $screenlock
    bindsym $mod+Shift+z exec $screenlock

#
# Control brightness
#

    bindsym $brighter exec brightnessctl s 7%+
    bindsym $darker exec brightnessctl s 6%-

#
# Take screenshots
#
    bindsym Print exec slurp | grimshot savecopy area

include /etc/sway/config.d/*


#
# Volume control
#
    bindsym XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle
    bindsym XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5%
    bindsym XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5%

#
# Startup setup
#
bindsym $mod+Shift+s workspace 6; exec slackw; workspace 3; exec foot --working-directory=/home/arseniy/proj/sonar-cpp; workspace 2; exec islandw; workspace 1; exec emacs
